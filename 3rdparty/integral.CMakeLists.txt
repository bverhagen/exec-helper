set(MODULE lua-wrapper)
set(PACKAGE Integral)

find_package(${PACKAGE})
option(USE_SYSTEM_INTEGRAL "Use the ${MODULE} library provided by the system" ${${PACKAGE}_FOUND})

if(${USE_SYSTEM_INTEGRAL})
    if(NOT ${${PACKAGE}_FOUND})
        MESSAGE(FATAL_ERROR "Could NOT find ${MODULE}")
    endif()
else()
    MESSAGE(STATUS " -> Using latest upstream version of ${PACKAGE} instead")

    include(ExternalProject)

    set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/lua-wrapper/src/Integral)
    set(INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/${MODULE})

    if(CMAKE_TOOLCHAIN_FILE)
        # Inherit settings from toolchain file
        get_filename_component(TOOLCHAIN_FILE "${CMAKE_TOOLCHAIN_FILE}" ABSOLUTE BASE_DIR "${PROJECT_SOURCE_DIR}")
        set(ADDITIONAL_BUILD_ARGS -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE})
    else()
        set(ADDITIONAL_BUILD_ARGS -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER})
    endif()

    ExternalProject_Add(${PACKAGE}
        PREFIX ${MODULE}
        GIT_REPOSITORY https://github.com/aphenriques/integral.git
        GIT_SUBMODULES "dependencies/exception"
        CONFIGURE_COMMAND ""
        BUILD_COMMAND "make;CXX=${CMAKE_CXX_COMPILER};WITH_LUAJIT=y;LUA_INCLUDE_DIR=${luajit_INCLUDE_DIRS};static"
        BUILD_IN_SOURCE 1
        INSTALL_COMMAND "make;--directory;${SOURCE_DIR};INSTALL_TOP=${INSTALL_DIR};WITH_LUAJIT=y;LUA_INCLUDE_DIR=${luajit_INCLUDE_DIRS};CXX=${CMAKE_CXX_COMPILER};install_static;install_exception"
        UPDATE_COMMAND ""
        )

    set(${PACKAGE}_INCLUDE_DIRS ${INSTALL_DIR}/include lua)
    set(${PACKAGE}_LIBRARIES integral lua)
    set(${PACKAGE}_LIBRARY_PATH ${INSTALL_DIR}/lib)

    add_dependencies(${PACKAGE} lua)
    add_dependencies(download ${PACKAGE})
endif()

add_library(${MODULE} INTERFACE)
if(NOT ${USE_SYSTEM_INTEGRAL})
    add_dependencies(${MODULE} ${PACKAGE})
endif()

target_include_directories(${MODULE} SYSTEM INTERFACE ${${PACKAGE}_INCLUDE_DIRS})
target_link_libraries(${MODULE} INTERFACE ${${PACKAGE}_LIBRARIES})
target_link_directories(${MODULE} INTERFACE ${${PACKAGE}_LIBRARY_PATH})
