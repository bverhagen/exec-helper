set(MODULE lua)
set(PACKAGE luajit)

find_package(${PACKAGE})
option(USE_SYSTEM_LUA "Use the ${PACKAGE} library provided by the system" ${${PACKAGE}_FOUND})

if(${USE_SYSTEM_LUA})
    if(NOT ${${PACKAGE}_FOUND})
        MESSAGE(FATAL_ERROR "Could NOT find ${MODULE}")
    endif()

    add_library(lua INTERFACE)
    target_include_directories(lua SYSTEM INTERFACE ${${PACKAGE}_INCLUDE_DIRS})
    target_link_libraries(lua INTERFACE ${${PACKAGE}_LIBRARIES})
    set(lua_LIBRARY_DIRS ${${PACKAGE}_LIBRARY_DIRS} CACHE PATH "Library dir for lua dependency")
    mark_as_advanced(lua_LIBRARY_DIRS)
else()
    MESSAGE(STATUS "Using latest upstream version of ${PACKAGE}")

    include(ExternalProject)

    set(EXTERNAL ${PACKAGE}-external)

    set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/src/${EXTERNAL})
    set(INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/${MODULE})
    set(INSTALL_LIB_DIR ${INSTALL_DIR}/lib)
    file(TO_NATIVE_PATH ${INSTALL_DIR}/include/luajit-2.0 WIN_INSTALL_INCLUDE_DIR)
    file(TO_NATIVE_PATH ${INSTALL_LIB_DIR} WIN_INSTALL_LIB_DIR)

    set(ADDITIONAL_MAKE_ARGS HOST_CC=${CMAKE_C_COMPILER} CROSS=${CMAKE_C_COMPILER_TARGET} PREFIX=${INSTALL_DIR})
    if(NOT CMAKE_VERBOSE_MAKEFILE)
        list(APPEND ADDITIONAL_MAKE_ARGS --quiet)
    endif()

    if(MSVC)
        ExternalProject_Add(${EXTERNAL}
            PREFIX ${MODULE}
            GIT_REPOSITORY https://github.com/LuaJIT/LuaJIT.git
            GIT_TAG v2.0.5
            CONFIGURE_COMMAND ""
            BUILD_COMMAND "cd;src;&&;msvcbuild.bat"
            BUILD_IN_SOURCE 1
            INSTALL_DIR "${INSTALL_DIR}"
            INSTALL_COMMAND "mkdir;${WIN_INSTALL_INCLUDE_DIR};&&;copy;src\\*.lib;${WIN_INSTALL_LIB_DIR};&&;copy;src\\*.hpp;${WIN_INSTALL_INCLUDE_DIR};&&;copy;src\\*.h;${WIN_INSTALL_INCLUDE_DIR}"
            UPDATE_COMMAND ""
            )

        install(FILES ${SOURCE_DIR}/src/lua51.dll DESTINATION ${BIN_DIRECTORY})
    else()
        ExternalProject_Add(${EXTERNAL}
            PREFIX ${MODULE}
            GIT_REPOSITORY https://github.com/LuaJIT/LuaJIT.git
            GIT_TAG v2.0.5
            CONFIGURE_COMMAND ""
            BUILD_COMMAND "make;${ADDITIONAL_MAKE_ARGS}"
            BUILD_IN_SOURCE 1
            INSTALL_DIR "${INSTALL_DIR}"
            INSTALL_COMMAND "make;--directory;${SOURCE_DIR};${ADDITIONAL_MAKE_ARGS};install"
            UPDATE_COMMAND ""
            )
    endif()

    set(INCLUDE_DIRS ${INSTALL_DIR}/include/luajit-2.0)
    set(${PACKAGE}_INCLUDE_DIRS ${INCLUDE_DIRS})

    file(MAKE_DIRECTORY ${INSTALL_LIB_DIR})
    if(MSVC)
        set(LIBRARY ${INSTALL_LIB_DIR}/luajit.lib)

        file(TOUCH ${INSTALL_LIB_DIR}/buildvm.lib)
        file(TOUCH ${INSTALL_LIB_DIR}/lua51.lib)
        file(TOUCH ${INSTALL_LIB_DIR}/minilua.lib)
    else()
        set(LIBRARY ${INSTALL_LIB_DIR}/libluajit-5.1.a)
    endif()

    file(TOUCH ${LIBRARY})

    add_library(${PACKAGE} STATIC IMPORTED GLOBAL)
    target_include_directories(${PACKAGE} SYSTEM INTERFACE ${INCLUDE_DIRS})
    if(MSVC)
        target_link_libraries(${PACKAGE} INTERFACE ${INSTALL_LIB_DIR}/buildvm.lib ${INSTALL_LIB_DIR}/lua51.lib ${INSTALL_LIB_DIR}/minilua.lib)
    else()
        target_link_libraries(${PACKAGE} INTERFACE dl)
    endif()
    set_property(TARGET ${PACKAGE} PROPERTY IMPORTED_LOCATION ${LIBRARY})

    add_dependencies(${PACKAGE} ${EXTERNAL})
    add_dependencies(download ${PACKAGE})

    add_library(${MODULE} ALIAS ${PACKAGE})
endif()
