patterns:
    COMPILER:
        default-values:
            - g++
            - clang++
        short-option: c
        long-option: compiler
    MODE:
        default-values:
            - debug
            - release
        short-option: m
        long-option: mode
    TARGET:
        default-values:
            - ""
        short-option: t
        long-option: target
    RUNTARGET:
        default-values:
            - all
        short-option: r
        long-option: run-target
    MODULE:
        default-values:
            - config
            - yaml
            - core
            - plugins
            - commander
        short-option: e
        long-option: module
    COMPONENT:
        default-values:
            - ""
        short-option: f
        long-option: component
    ANALYZE:
        default-values:
            - cppcheck
            - clang-static-analyzer
            - valgrind
            - pmd
            - lcov
            - clang-tidy
        short-option: a
        long-option: analyze
    MANTYPE:
        default-values:
            - man1
            - man5
        short-option: o
        long-option: man

commands:
    setup: Setup the repository for building
    init: Initialize the build infrastructure
    build: Build-only + install
    build-only: Build only
    install: Install only
    clean: Clean build
    distclean: Distclean build
    rebuild: Clean + build
    analyze: Run the specified analysis tool(s)
    run-test: Run the specified tests
    coverage: Run the coverage analysis tools using a specific setup (for convenience)
    memory-check: Run the memory check analysis tool for a specific setup (for convenience)
    undefined-behaviour: Check for undefined behaviour using UBSan
    docs: Docs-html + docs-man
    docs-man: Generate the man-page documentation
    docs-html: Generate the HTML documentation

setup:
    - command-line-command

init:
    - command-line-command

build:
    - build-only
    - install

build-only:
    - make

install:
    - command-line-command

clean:
    - make

distclean:
    - command-line-command

rebuild:
    - clean
    - build

analyze:
    - selector

run-test:
    - command-line-command

coverage:
    - command-line-command

memory-check:
    - command-line-command

docs:
    - docs-html
    - docs-man

docs-html:
    - make
    - command-line-command

docs-man:
    - make
    - command-line-command

selector:
    analyze:
        pattern: ANALYZE

undefined-behaviour:
    - command-line-command

make:
    patterns:
        - COMPILER
        - MODE
    build-dir: build/{COMPILER}/{MODE}/build
    single-threaded: no
    clean:
        command-line:
            - clean
    docs-html:
        command-line:
            - docs-html
    docs-man:
        patterns:
            - COMPILER
            - MODE
            - MANTYPE
        command-line:
            - docs-{MANTYPE}

cppcheck:
    patterns:
        - MODULE
        - TARGET
    src-dir: src/{MODULE}
    target-path: "{TARGET}"
    command-line:
        - --std=c++11
        - --error-exitcode=1
    enable-checks:
        - all

clang-static-analyzer:
    build-command:
        - init
        - build
    clean-command: clean

command-line-command:
    setup:
        patterns:
            - COMPILER
            - MODE
        command-line: [ ln, -fs, "build/{COMPILER}/{MODE}/build/compile_commands.json"]
    init:
        patterns:
            - COMPILER
            - MODE
        command-line: [ cmake, -H., "-Bbuild/{COMPILER}/{MODE}/build", "-DCMAKE_CXX_COMPILER={COMPILER}", "-DCMAKE_INSTALL_PREFIX=build/{COMPILER}/{MODE}/install", -DCMAKE_EXPORT_COMPILE_COMMANDS=ON, "-DCMAKE_BUILD_TYPE={MODE}", -DUSE_SYSTEM_CATCH=OFF, -DBUILD_HTML_DOCUMENTATION=OFF, -DBUILD_MAN_DOCUMENTATION=ON]
    distclean:
        patterns:
            - COMPILER
            - MODE
        command-line: [ rm, -rf, "build/{COMPILER}/{MODE}"]
    install:
        patterns:
            - COMPILER
            - MODE
            - COMPONENT
        command-line: [ cmake, "-DCOMPONENT={COMPONENT}", -P, "build/{COMPILER}/{MODE}/build/cmake_install.cmake"]
    run-test:
        patterns:
            - COMPILER
            - MODE
            - RUNTARGET
            - MODULE
        command-line: build/{COMPILER}/{MODE}/install/usr/bin/test/{RUNTARGET}/exec-helper-{MODULE}-{RUNTARGET}
    coverage:
        environment:
            CXXFLAGS: --coverage -fprofile-arcs -ftest-coverage
            LDFLAGS: -fprofile-arcs -ftest-coverage
        command-line: [ exec-helper, init, build, analyze, --analyze, lcov, --compiler, g++, --mode, coverage, --run-target, unittest]
    undefined-behaviour:
        environment:
            CXXFLAGS: -g -fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=undefined
            LDFLAGS: -g -fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=undefined
            UBSAN_OPTIONS: print_stacktrace=1
        command-line: [ exec-helper, init, build, run-test, --compiler, g++, --mode, undefined-behaviour, --run-target, unittest]
    memory-check:
        command-line: [ exec-helper, analyze, --analyze, valgrind, --run-target, unittest, --compiler, g++, --mode, debug]
    docs-html:
        patterns:
            - COMPILER
            - MODE
        command-line: [ cmake, "-DCOMPONENT=docs", -P, "build/{COMPILER}/{MODE}/build/cmake_install.cmake"]
    docs-man:
        patterns:
            - COMPILER
            - MODE
        command-line: [ cmake, "-DCOMPONENT=docs", -P, "build/{COMPILER}/{MODE}/build/cmake_install.cmake"]

valgrind:
    run-command: run-test
    analyze:
        tool: memcheck
        command-line:
           - --leak-check=full 

pmd:
    patterns:
        - MODULE
    exec: 3rdparty/pmd/pmd-bin-5.7.0/bin/run.sh
    tool:
        - cpd
    language: cpp
    files: 
        - src/{MODULE}
        - test/{MODULE}
    minimum-tokens: 100
    command-line:
        - " "

lcov:
    run-command: run-test
    base-directory: .
    directory: .
    zero-counters: yes
    excludes:
        - /usr*
        - "*/3rdparty/*"
        - "*/test/*"
    gen-html: yes
    gen-html-output: test_coverage
    gen-html-command-line:
        - --num-spaces
        - 4

clang-tidy:
    analyze:
        patterns:
            - MODULE
        sources:
            src/{MODULE}/src/*.cpp:
                checks: 
                    - "*"
                    - -google-readability-namespace-comments
                    - -llvm-namespace-comment
                    - -cppcoreguidelines-pro-bounds-pointer-arithmetic
                    - -clang-analyzer-alpha.deadcode.UnreachableCode
                    - -clang-analyzer-alpha.core.CastToStruct
                    - -modernize-make-unique
                    - -readability-redundant-declaration        # Static member variable definitions give false positives when enabled
            test/{MODULE}/src/*.cpp:
                checks:
                    - "*"
                    - -google-readability-namespace-comments
                    - -llvm-namespace-comment
                    - -clang-analyzer-alpha.deadcode.UnreachableCode
                    - -performance-unnecessary-copy-initialization
                    - -modernize-loop-convert
                    - -google-readability-function-size
                    - -readability-function-size
                    - -cert-err58-cpp
        warnings-as-errors: all
