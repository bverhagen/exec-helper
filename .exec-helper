patterns:
    COMPILER:
        default-values:
            - g++
            - clang++
        short-option: c
        long-option: compiler
    MODE:
        default-values:
            - debug
            - release
        short-option: m
        long-option: mode
    TARGET:
        default-values:
            - ""
        short-option: t
        long-option: target
    RUNTARGET:
        default-values:
            - all
        short-option: r
        long-option: run-target
    MODULE:
        default-values:
            - config
            - yaml
            - core
            - plugins
            - commander
        short-option: e
        long-option: module
    ANALYZE:
        default-values:
            - cppcheck
            - clang-static-analyzer
            - valgrind
            - pmd
            - lcov
            - clang-tidy
        short-option: a
        long-option: analyze

commands:
    setup: Setup the repository for building
    init: Initialize the build infrastructure
    build: Build-only + install-only
    build-only: Build only
    install: Install only
    clean: Clean build
    distclean: Distclean build
    rebuild: Clean + build
    analyze: Run the specified analysis tool(s)
    run-test: Run the specified tests
    coverage: Run the coverage analysis tools using a specific setup (for convenience)
    memory-check: Run the memory check analysis tool for a specific setup (for convenience)

setup:
    - command-line-command

init:
    - command-line-command

build:
    - build-only
    - install

build-only:
    - make

install:
    - make

clean:
    - make

distclean:
    - command-line-command

rebuild:
    - clean
    - build

analyze:
    - selector

run-test:
    - command-line-command

coverage:
    - command-line-command

memory-check:
    - command-line-command

selector:
    analyze:
        pattern: ANALYZE

make:
    patterns:
        - COMPILER
        - MODE
    build-dir: build/{COMPILER}/{MODE}
    single-threaded: no
    clean:
        command-line:
            - clean
    install:
        command-line:
            - install

cppcheck:
    patterns:
        - MODULE
        - TARGET
    src-dir: src/{MODULE}
    target-path: "{TARGET}"
    command-line:
        - --std=c++11
        - --error-exitcode=1
    enable-checks:
        - all

clang-static-analyzer:
    build-command:
        - init
        - build
    clean-command: clean

command-line-command:
    setup:
        patterns:
            - COMPILER
            - MODE
        command-line:
            - ln
            - -fs
            - build/{COMPILER}/{MODE}/compile_commands.json
    init:
        patterns:
            - COMPILER
            - MODE
        command-line:
            - cmake
            - -H.
            - -Bbuild/{COMPILER}/{MODE}
            - -DCMAKE_CXX_COMPILER={COMPILER}
            - -DCMAKE_INSTALL_PREFIX=build/{COMPILER}/{MODE}
            - -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
            - -DCMAKE_BUILD_TYPE={MODE}
            - -DUSE_SYSTEM_CATCH=OFF
    distclean:
        patterns:
            - COMPILER
            - MODE
        command-line:
            - rm
            - -rf
            - build/{COMPILER}/{MODE}
    run-test:
        patterns:
            - COMPILER
            - MODE
            - RUNTARGET
            - MODULE
        command-line: build/{COMPILER}/{MODE}/bin/test/{RUNTARGET}/exec-helper-{MODULE}-{RUNTARGET}
    coverage:
        command-line:
            - CXXFLAGS="--coverage -fprofile-arcs -ftest-coverage"
            - LDFLAGS="-fprofile-arcs -ftest-coverage"
            - exec-helper
            - init
            - build
            - analyze
            - --analyze
            - lcov
            - --compiler
            - g++
            - --mode
            - profile
            - --run-target
            - unittest
    memory-check:
        command-line:
            - exec-helper
            - analyze
            - --analyze
            - valgrind
            - --run-target
            - unittest
            - --compiler
            - g++
            - --mode
            - debug

valgrind:
    run-command: run-test
    analyze:
        tool: memcheck
        command-line:
           - --leak-check=full 

pmd:
    patterns:
        - MODULE
    exec: 3rdparty/pmd/pmd-bin-5.5.4/bin/run.sh
    tool:
        - cpd
    language: cpp
    files: 
        - src/{MODULE}
        - test/{MODULE}
    minimum-tokens: 100
    command-line:
        - " "

lcov:
    run-command: run-test
    base-directory: .
    directory: .
    zero-counters: yes
    excludes:
        - /usr*
        - "*/3rdparty/*"
        - "*/test/*"
    gen-html: yes
    gen-html-output: test_coverage
    gen-html-command-line:
        - --num-spaces
        - 4

clang-tidy:
    analyze:
        patterns:
            - MODULE
        sources:
            src/{MODULE}/src/*.cpp:
                checks: 
                    - "*"
                    - "-google-readability-namespace-comments"
                    - "-llvm-namespace-comment"
                    - "-cppcoreguidelines-pro-bounds-pointer-arithmetic"
                    - "-clang-analyzer-alpha.deadcode.UnreachableCode"
                    - "-clang-analyzer-alpha.core.CastToStruct"
                    - "-modernize-make-unique"
            test/{MODULE}/src/*.cpp:
                checks:
                    - "*"
                    - "-google-readability-namespace-comments"
                    - "-llvm-namespace-comment"
                    - "-clang-analyzer-alpha.deadcode.UnreachableCode"
                    - "-performance-unnecessary-copy-initialization"
                    - "-modernize-loop-convert"
        command-line:
            - "-warnings-as-errors=*"
