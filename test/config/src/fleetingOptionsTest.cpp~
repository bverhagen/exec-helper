#include "unittest/catch.h"

#include "config/commandLineOptions.h"
#include "config/fleetingOptions.h"
#include "config/variablesMap.h"
#include "log/logLevel.h"

using execHelper::log::LogLevel;
using execHelper::log::toLogLevel;
using execHelper::log::all;
using execHelper::log::none;

namespace execHelper {
namespace config {
namespace test {
    SCENARIO("Test the fleeting options defaults", "[config][fleeting-options]") {
        GIVEN("The expected defaults") {
            VariablesMap expectedDefaults("exec-helper");
            expectedDefaults.add(HELP_KEY, "no");
            expectedDefaults.add(VERBOSE_KEY, "no");
            expectedDefaults.add(SINGLE_THREADED_KEY, "no");
            expectedDefaults.add(DRY_RUN_KEY, "no");
            expectedDefaults.add(LOG_LEVEL_KEY, "none");
            expectedDefaults.add(COMMAND_KEY);
            expectedDefaults.add(SETTINGS_FILE_KEY);

            WHEN("We request the defaults") {
                VariablesMap defaults = FleetingOptions::getDefault();

                THEN("They must match the expected ones") {
                    REQUIRE(defaults == expectedDefaults);
                }
            }
        }
    }

    SCENARIO("Test the getters of the fleeting options", "[config][fleeting-options]") {
        MAKE_COMBINATIONS("Of several settings") {
            VariablesMap variables = FleetingOptions::getDefault();

            auto expectedHelp = variables.get<HelpOption_t>(HELP_KEY).get();
            auto expectedVerbose = variables.get<VerboseOption_t>(VERBOSE_KEY).get();
            auto expectedThreaded = variables.get<SingleThreadedOption_t>(SINGLE_THREADED_KEY).get();
            auto expectedDryRun = variables.get<DryRunOption_t>(DRY_RUN_KEY).get();
            auto expectedLogLevel = toLogLevel(variables.get<LogLevelOption_t>(LOG_LEVEL_KEY).get());
            auto expectedCommands = variables.get<CommandCollection>(COMMAND_KEY).get();
            expectedCommands.emplace_back("command");

            COMBINATIONS("Enable help") {
                expectedHelp = true;
                variables.add(HELP_KEY, "yes");
            }

            COMBINATIONS("Enable verbosity") {
                expectedVerbose = true;
                variables.add(VERBOSE_KEY, "yes");
            }

            COMBINATIONS("Enable single threaded") {
                expectedThreaded = true;
                variables.add(SINGLE_THREADED_KEY, "yes");
            }

            COMBINATIONS("Enable dry run") {
                expectedDryRun = true;
                variables.add(DRY_RUN_KEY, "yes");
            }

            COMBINATIONS("Disable logging") {
                expectedLogLevel = all;
                variables.add(LOG_LEVEL_KEY, "all");
            }

            COMBINATIONS("Add additional commands") {
                expectedCommands.emplace_back("command2");
                expectedCommands.emplace_back("command3");
            }

            variables.add(COMMAND_KEY, expectedCommands);

            THEN_WHEN("We create fleeting options based on the variables map") {
                FleetingOptions fleetingOptions(variables);

                THEN_CHECK("The getters are as expected") {
                    REQUIRE(fleetingOptions.getHelp() == expectedHelp);
                    REQUIRE(fleetingOptions.getVerbosity() == expectedVerbose);
                    REQUIRE(fleetingOptions.getSingleThreaded() == expectedThreaded);
                    REQUIRE(fleetingOptions.getDryRun() == expectedDryRun);
                    REQUIRE(fleetingOptions.getLogLevel() == expectedLogLevel);
                    REQUIRE(fleetingOptions.getCommands() == expectedCommands);
                }
            }
        }
    }

    SCENARIO("Test when no commands are passed to the fleeting options", "[config][fleeting-options]") {
        GIVEN("A variables map that is valid except that it has no commands and help is switched off") {
            VariablesMap variables = FleetingOptions::getDefault();
            variables.replace(HELP_KEY, "no");
            variables.clear(COMMAND_KEY);

            WHEN("We create fleating options with this variables map") {
                THEN("It should throw") {
                    REQUIRE_THROWS_AS(FleetingOptions(variables), const InvalidFleetingOptionsException&);
                }
            }
        }
    }
} // namespace test 
} // namespace config
} // namespace execHelper
