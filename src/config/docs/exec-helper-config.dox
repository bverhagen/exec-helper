/**
 * \page exec-helper-config
 * \brief Configuration file formats and conventions for exec-helper
 *
 * \section description DESCRIPTION
 * Exec-helper configuration files are written in the YAML 1.2 specification.
 * 
 * \section mandatory-keys MANDATORY KEYS
 * A valid configuration file must contain at least the following keys on the root level of the configuration file:
 *
 * \par commands
 * The commands that are configured in the configuration file. It will either contain a list of commands or a list of the commands as keys with an explanation of the command as a value. Due to the limitations of the YAML 1.2 spec, those formats can not be used interchangeably.
 *
 * \par <command-keys>
 * For every command defined under the \em commands key, the configuration must define this command as a key in the root of the configuration file. The value of the key must either be a registered plugin or another command.
 *
 * \par <plugin-keys>
 * For at least every plugin that is used by a \em command-key, configure the specifics of the plugin (if applicable).
 *
 * \section optional-keys OPTIONAL KEYS
 * Optionally the configuration file contains the following keys on the root level of the configuration file:
 * \par patterns
 * Patterns are parts of the configuration that will be replaced by its value when evaluated by exec-helper. The \em patterns keyword describes a list of patterns identified by their key. See the \ref patterns section for more information about how to define a pattern.
 *
 * \section patterns PATTERNS
 * A pattern can contain the following fields:
 * \par default-values
 * A list of default values to use when no values have been defined.
 * 
 * \par short-option
 * The short option on the command line associated with this pattern
 *
 * \par long-option
 * The long option on the command line associated with this pattern
 *
 * \section example-config EXAMPLE CONFIGURATION
 * \code
 * commands:                       // The mandatory commands key
 *     build: Build the project    // A list of command keys with their explanation
 *     clean: Clean the project
 *     rebuild: Build + clean
 *
 * patterns:                       // Define a list of patterns
 *     COMPILER:                   // Define a pattern
 *         default-values:         // Default values to use for the pattern
 *           - g++
 *           - clang++
 *         short-option: c         // Define values for this pattern by using the -c [VALUES] option when calling exec-helper
 *         long-option: compiler   // Define values for this pattern by using the --compiler [VALUES] option when calling exec-helper
 *
 * build:                          // Define the commands listed under 'commands'
 *    - command-line-command       // Use the command-line-command plugin when using the 'build' command
 *
 * clean:
 *    - command-line-command       // Use the command-line-command plugin when using the 'clean' command
 * 
 * rebuild:
 *    - clean                      // Call the 'clean' command when calling the 'rebuild' command
 *    - build                      // Call the 'build' command when calling the 'rebuild' command
 *
 * command-line-command:           // Configure the command-line-command
 *    build:
 *        - echo
 *        - build
 *    clean:
 *        - echo
 *        - build
 * \endcode
 *
 * \section see-also SEE ALSO
 * See \ref exec-helper (1) for information about the usage of exec-helper
 *
 * See \ref exec-helper-plugins (5) for the available plugins and their configuration options.
 *
 * \section copyright COPYRIGHT
 * Exec-helper is Copyright &copy; 2016-2017 under the GNU General Public License v3.0.
 *
 * \section author AUTHOR
 * Written by B. Verhagen
 */
