image: dock0/arch

before_script:
    - pacman -Sy --noconfirm
    - pacman -S --noconfirm --needed boost boost-libs yaml-cpp

stages:
    - build
    - test
    - analyze
    - deploy

build:gcc:
    stage: build
    script:
        - pacman -S --noconfirm --needed gcc cmake make git libunistring ncurses doxygen
        - cmake -H. -Bbuild/g++/debug/build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=build/g++/debug/install -DCMAKE_BUILD_TYPE=Debug -DUSE_SYSTEM_CATCH=OFF && make -C build/g++/debug/build --jobs 4 && make -C build/g++/debug/build install
        - cmake -H. -Bbuild/g++/release/build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=build/g++/release/install -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_CATCH=OFF && make -C build/g++/release/build --jobs 4 && make -C build/g++/release/build install
    artifacts:
        expire_in: 1 day
        paths:
            - build/g++/debug/install
            - build/g++/release/install

build:gcc:limited-optimization:
    stage: build
    script:
        - pacman -S --noconfirm --needed gcc cmake make git libunistring ncurses
        - cmake -H. -Bbuild/g++/release/build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=build/g++/release/install -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_CATCH=OFF -DLIMITED_OPTIMIZATION=ON && make -C build/g++/release/build --jobs 4 && make -C build/g++/release/build install
    artifacts:
        expire_in: 1 day
        paths:
            - build/g++/release/install

build:clang:
    stage: build
    script: 
        - pacman -S --noconfirm --needed clang cmake make git libunistring ncurses
        - cmake -H. -Bbuild/clang++/debug/build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=build/clang++/debug/install -DCMAKE_BUILD_TYPE=Debug -DUSE_SYSTEM_CATCH=OFF && make -C build/clang++/debug/build --jobs 4 && make -C build/clang++/debug/build install
        - cmake -H. -Bbuild/clang++/release/build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=build/clang++/release/install -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_CATCH=OFF && make -C build/clang++/release/build --jobs 4 && make -C build/clang++/release/build install
    artifacts:
        expire_in: 1 day
        paths:
            - build/clang++/debug/install
            - build/clang++/release/install

test-distribution:ubuntu-yakkety:
    image: ubuntu:yakkety
    stage: analyze
    before_script:
        - apt-get update
        - apt-get install --yes build-essential cmake make gcc g++ clang libboost-program-options-dev libyaml-cpp-dev git doxygen
        # Workaround for issue with cmake thinking make is in the /usr/sbin directory
        - ln -fs /usr/bin/make /usr/sbin/make
        - which make
        - ls -l /usr/sbin
    script:
        - cmake -H. -Bbuild/g++/release/build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=build/g++/release/install -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_CATCH=OFF
        - cmake -H. -Bbuild/clang++/release/build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=build/clang++/release/install -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_CATCH=OFF

unittest-core:
    stage: test
    dependencies:
        - build:gcc
        - build:clang
    script:
        - build/g++/release/install/usr/bin/exec-helper run-test --module core --run-target unittest --compiler g++ clang++ --mode release

unittest-yaml:
    stage: test
    dependencies:
        - build:gcc
        - build:clang
    script:
        - build/g++/release/install/usr/bin/exec-helper run-test --module yaml --run-target unittest --compiler g++ clang++ --mode release

unittest-config:
    stage: test
    dependencies:
        - build:gcc
        - build:clang
    script:
        - build/g++/release/install/usr/bin/exec-helper run-test --module config --run-target unittest --compiler g++ clang++ --mode release

unittest-plugins:
    stage: test
    dependencies:
        - build:gcc
        - build:clang
    script:
        - build/g++/release/install/usr/bin/exec-helper run-test --module plugins --run-target unittest --compiler g++ clang++ --mode release

unittest-commander:
    stage: test
    dependencies:
        - build:gcc
        - build:clang
    script:
        - build/g++/release/install/usr/bin/exec-helper run-test --module commander --run-target unittest --compiler g++ clang++ --mode release

memory-check:
    stage: analyze
    dependencies:
        - build:gcc:limited-optimization
    script:
        - pacman -S --noconfirm valgrind
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze valgrind --run-target unittest --compiler g++ --mode release --module core yaml config commander

memory-check-plugins:
    stage: analyze
    dependencies:
        - build:gcc:limited-optimization
    script:
        - pacman -S --noconfirm valgrind
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze valgrind --run-target unittest --compiler g++ --mode release --module plugins

cppcheck:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm cppcheck
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze cppcheck

clang-tidy-core:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --needed --noconfirm cppcheck gcc cmake make clang-tools-extra
        - build/g++/release/install/usr/bin/exec-helper setup init -c g++ -m release
        - make -C build/g++/release/build Catch
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze clang-tidy --module core

clang-tidy-plugin:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --needed --noconfirm cppcheck gcc cmake make clang-tools-extra
        - build/g++/release/install/usr/bin/exec-helper setup init -c g++ -m release
        - make -C build/g++/release/build Catch
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze clang-tidy --module plugins

clang-tidy-rest:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --needed --noconfirm cppcheck gcc cmake make clang-tools-extra
        - build/g++/release/install/usr/bin/exec-helper setup init -c g++ -m release
        - make -C build/g++/release/build Catch
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze clang-tidy --module yaml commander config

clang-static-analyzer:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed clang cmake make git libunistring ncurses
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze clang-static-analyzer --mode debug --compiler ''

undefined-behaviour:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed clang cmake make git libunistring ncurses
        - export PATH=$PATH:build/g++/release/install/usr/bin
        - build/g++/release/install/usr/bin/exec-helper undefined-behaviour


code-duplication-pmd-cpd:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed java-environment unzip wget
        - mkdir -p 3rdparty/pmd
        - pushd 3rdparty/pmd && wget --no-check-certificate "https://downloads.sourceforge.net/project/pmd/pmd/5.7.0/pmd-bin-5.7.0.zip" && unzip pmd-bin-5.7.0.zip; popd
        - build/g++/release/install/usr/bin/exec-helper analyze --analyze pmd

coverage:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed base-devel curl gcc cmake make git libunistring ncurses
        - bash -x gitlab/install-aur.sh lcov
        - export PATH=$PATH:build/g++/release/install/usr/bin
        - build/g++/release/install/usr/bin/exec-helper coverage
    artifacts:
        paths:
            - test_coverage/

examples:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed base-devel curl gcc clang make scons clang-tools-extra cppcheck git java-environment unzip wget valgrind
        - bash -x gitlab/install-aur.sh lcov
        - mkdir -p 3rdparty/pmd
        - pushd 3rdparty/pmd && wget --no-check-certificate "https://downloads.sourceforge.net/project/pmd/pmd/5.7.0/pmd-bin-5.7.0.zip" && unzip pmd-bin-5.7.0.zip; popd
        - export PATH=$PATH:$(pwd)/build/g++/release/install/usr/bin:$(pwd)/3rdparty/pmd/pmd-bin-5.7.0/bin
        - export ROOT_DIR=$(pwd)
        - cd ${ROOT_DIR}/src/config/examples
        - exec-helper --settings-file exec-helper-config.example build clean rebuild
        - cd ${ROOT_DIR}/src/plugins/examples
        - exec-helper --settings-file command-line-command.example example
        - exec-helper --settings-file selector.example example
        - exec-helper --settings-file bootstrap.example example
        - exec-helper --settings-file make.example example
        - exec-helper --settings-file scons.example example
        - exec-helper --settings-file clang-static-analyzer.example example
        - exec-helper --settings-file clang-tidy.example example
        - exec-helper --settings-file cppcheck.example example
        - exec-helper --settings-file lcov.example example
        - exec-helper --settings-file pmd.example example
        - exec-helper --settings-file valgrind.example example

pages:
    stage: deploy
    dependencies:
        - coverage
        - build:gcc
    script:
        - mkdir public
        - mv pages/index.html public/
        - mv test_coverage/ public/coverage
        - mv build/g++/release/install/usr/share/doc/exec-helper/doc public/docs
    artifacts:
        paths:
            - public
        expire_in: 30 days
    only:
        - dev
