image: scratch

stages:
    - build-image
    - build-native
    - build
    - test
    - analyze
    - deploy

variables:
    ALL_RUN_TARGETS: unittest integration
    ALL_MODULES: log config yaml core commander plugins
    ALL_SOURCE_TYPES: src test
    DOCKER_DRIVER: overlay2         # Overwrite default docker driver

.build_tools: &build_tools
        ":"           # Delegated to docker images

.install_exec_helper: &install_exec_helper
        sudo cp build/native/release/src/applications/exec-helper /usr/local/bin/

.run_test: &run_test
    stage: test
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES
    dependencies:
        - build:native
        - build:gcc
        - build:clang
    script:
        - *install_exec_helper
        - export PATH=$(pwd)/build/g++/release/install/bin:$PATH
        - echo "using run target '$RUN_TARGET'"
        - echo "using modules '$MODULES'"
        - exec-helper run-test --run-target $RUN_TARGET --module $MODULES --compiler g++ clang++ --mode release

.memory-check: &memory_check
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        MODULES: $ALL_MODULES
        RUN_TARGET: $ALL_RUN_TARGETS
    dependencies:
        - build:native
        - build:gcc:limited-optimization
    script:
        - *install_exec_helper
        - export PATH=$(pwd)/build/g++/release/install/bin:$PATH
        - exec-helper analyze --analyze valgrind --run-target $RUN_TARGET --compiler g++ --mode release --module $MODULES

.clang_tidy: &clang_tidy
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        MODULES: $ALL_MODULES
        SOURCE_TYPE: $ALL_SOURCE_TYPES
    dependencies:
        - build:native
    script:
        - *build_tools
        - *install_exec_helper
        - exec-helper setup init-build -c g++ -m release
        - exec-helper analyze --analyze clang-tidy --module $MODULES --source-type $SOURCE_TYPE

.cppcheck: &cppcheck
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        SOURCE_TYPE: $ALL_SOURCE_TYPES
        MODULES: $ALL_MODULES
    dependencies:
        - build:native
    script:
        - *install_exec_helper
        - exec-helper analyze --analyze cppcheck --source-type $SOURCE_TYPE --module $MODULES

.undefined_behaviour: &undefined_behaviour
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES
    dependencies:
        - build:native
    script:
        - *build_tools
        - *install_exec_helper
        - export CXXFLAGS="-g -fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=undefined -fsanitize-blacklist=\"$(pwd)/suppressions/ubsan.blacklist\""
        - export LDFLAGS="-g -fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=undefined -fsanitize-blacklist=\"$(pwd)/suppressions/ubsan.blacklist\""
        - export UBSAN_OPTIONS="print_stacktrace=1"
        - export PATH=$(pwd)/build/clang++/undefined-behaviour/install/bin:$PATH
        - exec-helper init-build build run-test --compiler clang++ --mode undefined-behaviour --run-target ${RUN_TARGET}

.code_format: &code_format
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    dependencies:
        - build:native
    variables:
        MODULES: $ALL_MODULES
        SOURCE_TYPE: $ALL_SOURCE_TYPES
    script:
        - *install_exec_helper
        - exec-helper analyze -a format

build-image:build:
    stage: build-image
    image: docker:latest
    services:
        - docker:dind
    variables:
        BUILD_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
        - echo "Building image '$BUILD_IMAGE'"
        - docker build -t ${BUILD_IMAGE} -f docker/build/Dockerfile .
        - docker push ${BUILD_IMAGE}

build-image:build-debian:
    stage: build-image
    image: docker:latest
    services:
        - docker:dind
    variables:
        BUILD_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build-debian
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
        - echo "Building image '$BUILD_IMAGE'"
        - docker build -t ${BUILD_IMAGE} -f docker/build/debian.Dockerfile .
        - docker push ${BUILD_IMAGE}

build-image:run:
    stage: build-image
    image: docker:latest
    services:
        - docker:dind
    variables:
        RUN_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
        - echo "Building image '$RUN_IMAGE'"
        - docker build -t ${RUN_IMAGE} -f docker/run/Dockerfile .
        - docker push ${RUN_IMAGE}

build-image:analyze:
    stage: build-image
    image: docker:latest
    services:
        - docker:dind
    variables:
        ANALYZE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
        - echo "Building image '$ANALYZE_IMAGE'"
        - docker build -t ${ANALYZE_IMAGE} -f docker/analyze/Dockerfile .
        - docker push ${ANALYZE_IMAGE}

build:native:
    stage: build-native
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    dependencies: []
    script:
        - *build_tools
        - make
        - suto make install
    artifacts:
        expire_in: 1 day
        paths:
            - build/native/release/src/applications/exec-helper

build:debian:
    stage: build-native
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build-debian
    dependencies: []
    script:
        - make USE_SYSTEM_GSL=OFF 
        - make install-bin
    artifacts:
        expire_in: 1 day
        paths:
            - build/native/release/src/applications/exec-helper

build:gcc:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    dependencies:
        - build:native
    script:
        - *build_tools
        - *install_exec_helper
        - exec-helper init build --compiler g++ --mode release
    artifacts:
        expire_in: 1 day
        paths:
            - build/g++/release/install

build:gcc:debug:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    dependencies:
        - build:native
    script:
        - *build_tools
        - *install_exec_helper
        - exec-helper init build --compiler g++ --mode debug

build:gcc:limited-optimization:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    script:
        - *build_tools
        - cmake -H. -Bbuild/g++/release/build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=build/g++/release/install -DCMAKE_BUILD_TYPE=Release -DLIMITED_OPTIMIZATION=ON
        - make -C build/g++/release/build --jobs 4
        - make -C build/g++/release/build install
    artifacts:
        expire_in: 1 day
        paths:
            - build/g++/release/install

build:clang:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    dependencies:
        - build:native
    script: 
        - *build_tools
        - *install_exec_helper
        - exec-helper init build --compiler clang++ --mode release
    artifacts:
        expire_in: 1 day
        paths:
            - build/clang++/release/install

unittests:
    <<: *run_test
    variables:
        RUN_TARGET: unittest
        MODULES: $ALL_MODULES

integration-test:
    <<: *run_test
    variables:
        RUN_TARGET: integration

memory-check:
    <<: *memory_check
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES

cppcheck-unittest:
    <<: *cppcheck
    variables:
        SOURCE_TYPE: src
        MODULES: $ALL_MODULES

clang-tidy:
    <<: *clang_tidy

clang-tidy-integration:
    <<: *clang_tidy
    variables:
        SOURCE_TYPE: test
        MODULES: integration

clang-static-analyzer:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    dependencies:
        - build:native
    script:
        - *build_tools
        - *install_exec_helper
        # Ugly hack for circumventing issues with the (unused) scan-build c compiler.
        - echo "SET(CMAKE_C_COMPILER  clang)" >> toolchain.cmake.in
        - exec-helper analyze --analyze clang-static-analyzer --mode debug --compiler ''

undefined-behaviour:
    <<: *undefined_behaviour

code-duplication-pmd-cpd:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    dependencies:
        - build:native
    script:
        - *install_exec_helper
        - exec-helper analyze --analyze pmd
        - exec-helper analyze --analyze pmd --module integration --source-type test

coverage:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    dependencies:
        - build:native
        - build:gcc
    script:
        - *build_tools
        - *install_exec_helper
        - exec-helper coverage
    artifacts:
        paths:
            - test_coverage/

#coverity:
    #stage: analyze
    #image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    #variables:
        #COVERITY_ARCHIVE_NAME: exec-helper_${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}.xz
    #dependencies:
        #- build:native
    #script:
        #- *build_tools
        #- *install_exec_helper
        #- curl --data "token=INxicvq4GqijG23xZzPNEA&project=bverhagen%2Fexec-helper" https://scan.coverity.com/download/linux64 -o coverity_tool.tgz
        #- tar -C /tmp -xf coverity_tool.tgz
        #- pushd /tmp/cov-analysis-linux64-*/bin
        #- export PATH=$PATH:$(pwd)
        #- popd
        #- exec-helper distclean analyze --analyze coverity --compiler g++ --mode release --coverity-archive-name $COVERITY_ARCHIVE_NAME
        #- curl --form token=${COVERITY_SCAN_TOKEN} --form email=barrie.verhagen@gmail.com --form file=@${COVERITY_ARCHIVE_NAME} --form version="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" --form description="Analysis scan for ${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" https://scan.coverity.com/builds?project=bverhagen%2Fexec-helper
    #only:
        #- master
        #- dev

examples:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    dependencies:
        - build:native
    script:
        - *install_exec_helper
        - export ROOT_DIR=$(pwd)
        - cd ${ROOT_DIR}/src/config/examples
        - exec-helper --settings-file exec-helper-config.example build clean rebuild
        - exec-helper --settings-file exec-helper-config-environment.example example
        - cd ${ROOT_DIR}/src/plugins/examples
        - exec-helper --settings-file command-line-command.example example
        - exec-helper --settings-file selector.example example
        - exec-helper --settings-file bootstrap.example example
        - exec-helper --settings-file make.example example
        - exec-helper --settings-file scons.example example
        - exec-helper --settings-file clang-static-analyzer.example example
        - exec-helper --settings-file clang-tidy.example example
        - exec-helper --settings-file cppcheck.example example
        - exec-helper --settings-file lcov.example example
        - exec-helper --settings-file pmd.example example
        - exec-helper --settings-file valgrind.example example

cross-compilation:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build-debian
    dependencies:
        - build:debian
    before_script:
        - *install_exec_helper
    script:
        - apt-get install --yes debootstrap g++-aarch64-linux-gnu cmake make pkg-config git
        - debootstrap --download-only --arch=arm64 --foreign --download-only --variant=minbase --include=libboost-program-options-dev,libboost-filesystem-dev,libboost-log-dev,libyaml-cpp-dev,doxygen,libc6-dev testing ./sysroot_arm64 http://deb.debian.org/debian/
        - for DEB in $(find sysroot_arm64/var/cache/apt/archives -not -path sysroot_arm64/var/cache/apt/archives/partial -type f); do echo "Extracting ${DEB}..."; dpkg -x ${DEB} sysroot_arm64; done   # Unpack all downloaded debian packages, since debootstrap does not seem to unpack the additional included ones and their dependencies
        - exec-helper init-build build --compiler aarch64-linux-gnu-g++ --mode release --sysroot $(pwd)/sysroot_arm64

code-format:
    <<: *code_format

pages:
    stage: deploy
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
    dependencies:
        - coverage
        - build:gcc
    script:
        - mkdir public
        - mv pages/index.html public/
        - mv test_coverage/ public/coverage
        - mkdir -p public/docs
        - mv build/g++/release/install/share/doc/exec-helper/html public/docs/
    artifacts:
        paths:
            - public
    only:
        - master
