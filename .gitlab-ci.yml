image: dock0/arch

variables:
    ALL_RUN_TARGETS: unittest integration
    ALL_MODULES: log config yaml core commander plugins
    ALL_SOURCE_TYPES: src test

.prepare: &prepare
        pacman -Sy --noconfirm

.install_exec_helper: &install_exec_helper
        pacman -S --noconfirm --needed boost boost-libs yaml-cpp make cmake && make install-bin

.prepare_debian: &prepare_debian
        rm -rf /var/lib/apt/lists/* && apt-get update           # Work around for debian mirror issues that often occur on Gitlab

.install_exec_helper_debian: &install_exec_helper_debian
        apt-get install --yes libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev make cmake && make install-bin    # Install dev packages so we do not have to keep track of the version numbering in the runtime package names

.run_test: &run_test
    stage: test
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES
    dependencies:
        - build:gcc
        - build:clang
    script:
        - *install_exec_helper
        - echo "using run target '$RUN_TARGET'"
        - echo "using modules '$MODULES'"
        - exec-helper run-test --run-target $RUN_TARGET --module $MODULES --compiler g++ clang++ --mode release

.memory-check: &memory_check
    stage: analyze
    variables:
        MODULES: $ALL_MODULES
        RUN_TARGET: $ALL_RUN_TARGETS
    dependencies:
        - build:gcc
        - build:gcc:limited-optimization
    script:
        - pacman -S --noconfirm valgrind
        - *install_exec_helper
        - exec-helper analyze --analyze valgrind --run-target $RUN_TARGET --compiler g++ --mode release --module $MODULES

.clang_tidy: &clang_tidy
    stage: analyze
    variables:
        MODULES: $ALL_MODULES
        SOURCE_TYPE: $ALL_SOURCE_TYPES
    dependencies:
        - build:gcc
    script:
        - pacman -S --needed --noconfirm gcc cmake make pkg-config clang-tools-extra
        - *install_exec_helper
        - exec-helper setup init-build -c g++ -m release
        - make -C build/g++/release/build Catch Gsl
        - exec-helper analyze --analyze clang-tidy --module $MODULES --source-type $SOURCE_TYPE

.cppcheck: &cppcheck
    stage: analyze
    variables:
        SOURCE_TYPE: $ALL_SOURCE_TYPES
        MODULES: $ALL_MODULES
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm cppcheck
        - *install_exec_helper
        - exec-helper analyze --analyze cppcheck --source-type $SOURCE_TYPE --module $MODULES

.undefined_behaviour: &undefined_behaviour
    stage: analyze
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed clang pkg-config
        - *install_exec_helper
        - export CXXFLAGS="-g -fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=undefined -fsanitize-blacklist=\"$(pwd)/suppressions/ubsan.blacklist\""
        - export LDFLAGS="-g -fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=undefined -fsanitize-blacklist=\"$(pwd)/suppressions/ubsan.blacklist\""
        - export UBSAN_OPTIONS="print_stacktrace=1"
        - exec-helper init-build build run-test --compiler clang++ --mode undefined-behaviour --run-target ${RUN_TARGET}

before_script:
    - *prepare

stages:
    - build
    - test
    - analyze
    - deploy

build:gcc:
    stage: build
    script:
        - pacman -S --noconfirm --needed boost boost-libs yaml-cpp gcc cmake make doxygen python-pip pkg-config
        - pip install gitchangelog
        - make && make install
        - exec-helper init build --compiler g++ --mode debug release
    artifacts:
        expire_in: 1 day
        paths:
            - build/native
            - build/g++/debug/install
            - build/g++/release/install

build:gcc:limited-optimization:
    stage: build
    script:
        - pacman -S --noconfirm --needed boost boost-libs yaml-cpp gcc cmake make python-pip pkg-config
        - pip install gitchangelog
        - cmake -H. -Bbuild/g++/release/build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=build/g++/release/install -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_CATCH=OFF -DLIMITED_OPTIMIZATION=ON
        - make -C build/g++/release/build --jobs 4
        - make -C build/g++/release/build install
    artifacts:
        expire_in: 1 day
        paths:
            - build/g++/release/install

build:clang:
    stage: build
    script: 
        - pacman -S --noconfirm --needed boost boost-libs yaml-cpp clang cmake make python-pip pkg-config doxygen
        - pip install gitchangelog
        - make && make install
        - exec-helper init build --compiler clang++ --mode debug release
    artifacts:
        expire_in: 1 day
        paths:
            - build/clang++/debug/install
            - build/clang++/release/install

build:debian:
    image: debian:testing
    stage: build
    before_script:
        - *prepare_debian
    script:
        - apt-get install --yes cmake make libboost-dev libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev pkg-config g++ git doxygen python-pip
        - pip install gitchangelog
        - make && make install-bin
    artifacts:
        expire_in: 1 day
        paths:
            - build/native/release

unittests:
    <<: *run_test
    variables:
        RUN_TARGET: unittest
        MODULES: $ALL_MODULES

integration-test:
    <<: *run_test
    variables:
        RUN_TARGET: integration

memory-check:
    <<: *memory_check
    variables:
        RUN_TARGET: unittest
        MODULES: log yaml config core commander

memory-check-plugins:
    <<: *memory_check
    variables:
        RUN_TARGET: unittest
        MODULES: plugins

memory-check-integration:
    <<: *memory_check
    variables:
        RUN_TARGET: integration
        MODULES: integration

cppcheck-unittest:
    <<: *cppcheck
    variables:
        SOURCE_TYPE: src
        MODULES: $ALL_MODULES

clang-tidy:
    <<: *clang_tidy

clang-tidy-integration:
    <<: *clang_tidy
    variables:
        SOURCE_TYPE: test
        MODULES: integration

clang-static-analyzer:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed clang cmake make pkg-config
        - *install_exec_helper
        # Ugly hack for circumventing issues with the (unused) scan-build c compiler.
        - echo "SET(CMAKE_C_COMPILER  clang)" >> toolchain.cmake.in
        - exec-helper analyze --analyze clang-static-analyzer --mode debug --compiler ''

undefined-behaviour:
    <<: *undefined_behaviour

code-duplication-pmd-cpd:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed java-environment unzip wget
        - mkdir -p 3rdparty/pmd
        - pushd 3rdparty/pmd && wget --no-check-certificate "https://downloads.sourceforge.net/project/pmd/pmd/5.8.1/pmd-bin-5.8.1.zip" && unzip pmd-bin-5.8.1.zip; popd
        - *install_exec_helper
        - exec-helper analyze --analyze pmd
        - exec-helper analyze --analyze pmd --module integration --source-type test

coverage:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed base-devel curl gcc cmake make pkg-config
        - bash -x gitlab/install-aur.sh lcov
        - *install_exec_helper
        - exec-helper coverage
    artifacts:
        paths:
            - test_coverage/

coverity:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed gcc cmake make git libunistring ncurses doxygen wget curl tar xz rsync
        - wget https://scan.coverity.com/download/linux64 --post-data "token=INxicvq4GqijG23xZzPNEA&project=bverhagen%2Fexec-helper" -O coverity_tool.tgz
        - tar -C /tmp -xf coverity_tool.tgz
        - export PATH=$PATH:$(pwd)/build/g++/release/install/bin
        - pushd /tmp/cov-analysis-linux64-*/bin
        - export PATH=$PATH:$(pwd)
        - popd
        - rsync --recursive . coverity
        - cd coverity
        - exec-helper distclean
        - exec-helper analyze --analyze coverity --compiler g++ --mode release
        - curl --form token=${COVERITY_SCAN_TOKEN} --form email=barrie.verhagen@gmail.com --form file=@exec-helper.xz --form version="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" --form description="Analysis scan for ${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" https://scan.coverity.com/builds?project=bverhagen%2Fexec-helper

examples:
    stage: analyze
    dependencies:
        - build:gcc
    script:
        - pacman -S --noconfirm --needed base-devel curl gcc clang make scons clang-tools-extra cppcheck git java-environment unzip wget valgrind
        - bash -x gitlab/install-aur.sh lcov
        - mkdir -p 3rdparty/pmd
        - *install_exec_helper
        - pushd 3rdparty/pmd && wget --no-check-certificate "https://downloads.sourceforge.net/project/pmd/pmd/5.7.0/pmd-bin-5.7.0.zip" && unzip pmd-bin-5.7.0.zip; popd
        - export PATH=$PATH:$(pwd)/3rdparty/pmd/pmd-bin-5.7.0/bin
        - export ROOT_DIR=$(pwd)
        - cd ${ROOT_DIR}/src/config/examples
        - exec-helper --settings-file exec-helper-config.example build clean rebuild
        - exec-helper --settings-file exec-helper-config-environment.example example
        - cd ${ROOT_DIR}/src/plugins/examples
        - exec-helper --settings-file command-line-command.example example
        - exec-helper --settings-file selector.example example
        - exec-helper --settings-file bootstrap.example example
        - exec-helper --settings-file make.example example
        - exec-helper --settings-file scons.example example
        - exec-helper --settings-file clang-static-analyzer.example example
        - exec-helper --settings-file clang-tidy.example example
        - exec-helper --settings-file cppcheck.example example
        - exec-helper --settings-file lcov.example example
        - exec-helper --settings-file pmd.example example
        - exec-helper --settings-file valgrind.example example

cross-compilation:
    image: debian:testing
    stage: analyze
    dependencies:
        - build:debian
    before_script:
        - *prepare_debian
        - *install_exec_helper_debian
    script:
        - apt-get install --yes debootstrap g++-aarch64-linux-gnu cmake make pkg-config git
        - debootstrap --download-only --arch=arm64 --foreign --download-only --variant=minbase --include=libboost-program-options-dev,libboost-filesystem-dev,libboost-log-dev,libyaml-cpp-dev,doxygen,libc6-dev testing ./sysroot_arm64 http://deb.debian.org/debian/
        - for DEB in $(find sysroot_arm64/var/cache/apt/archives -not -path sysroot_arm64/var/cache/apt/archives/partial -type f); do echo "Extracting ${DEB}..."; dpkg -x ${DEB} sysroot_arm64; done   # Unpack all downloaded debian packages, since debootstrap does not seem to unpack the additional included ones and their dependencies
        - find ./sysroot_arm64 -name pthread.h
        - exec-helper init-build build --compiler aarch64-linux-gnu-g++ --mode release --sysroot $(pwd)/sysroot_arm64

pages:
    stage: deploy
    dependencies:
        - coverage
        - build:gcc
    script:
        - mkdir public
        - mv pages/index.html public/
        - mv test_coverage/ public/coverage
        - mv build/g++/release/install/share/doc/exec-helper/html public/docs
    artifacts:
        paths:
            - public
        expire_in: 30 days
    only:
        - master
